const util = require('util');
const snippets = require('../snippets');

module.exports = function(RED) {
    function Algorithm(config) {
        RED.nodes.createNode(this, config);
        var node = this;

        // Function for RandomForest algorithm
        function randomForest(msg) {
            const script = util.format(snippets.RANDOMFOREST, config.n_estimators, config.criterion, config.max_depth, config.min_samples_split, config.min_samples_leaf);
            msg.payload += script;
            return msg;
        }

        // Function for DecisionTree algorithm
        function decisionTree(msg) {
            const script = util.format(snippets.DECISIONTREE, config.criterion, config.splitter, config.max_depth, config.min_samples_split, config.min_samples_leaf);
            msg.payload += script;
            return msg;
        }

        // Function for LogisticRegression algorithm
        function logisticRegression(msg) {
            const script = util.format(snippets.LOGISTICREGRESSION, config.penalty, config.solver);
            msg.payload += script;
            return msg;
        }

        node.on('input', function(msg) {
            switch (config.algorithm) {
                case "randomforest":
                    msg = randomForest(msg);
                    break;
                case "decisiontree":
                    msg = decisionTree(msg);
                    break;
                default:
                    msg = logisticRegression(msg);
            }
            
            msg.algorithm = config.algorithm;
            node.send(msg);
        });
    }

    RED.nodes.registerType("algorithm", Algorithm);
}
